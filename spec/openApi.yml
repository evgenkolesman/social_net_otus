openapi: 3.0.0
info:
  title: OTUS Highload Architect
  version: 1.2.0
paths:
  /login:
    post:
      tags:
        - User management and registration
      description: Упрощенный процесс аутентификации путем передачи идентификатор пользователя и получения токена для дальнейшего прохождения авторизации
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
      responses:
        '200':
          description: Логин
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Невалидные данные
        '404':
          description: Пользователь не найден
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /user/register:
    post:
      tags:
        - User management and registration
      description: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: Логин
        '400':
          description: Невалидные данные
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /user/get/{id}:
    get:
      tags:
        - User management and registration
      description: Получение анкеты пользователя
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/UserId'
          required: true
          in: path
          description: Идентификатор пользователя
      responses:
        '200':
          description: Успешное получение анкеты пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Невалидные данные
        '404':
          description: Анкета не найдена
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /user/search:
    get:
      tags:
        - User management and registration
      description: Поиск анкет
      parameters:
        - name: first_name
          schema:
            type: string
            description: Часть имени для поиска
            example: Конст
          in: query
          required: true
          description: Условие поиска по имени
        - name: last_name
          schema:
            type: string
            description: Часть фамилии для поиска
            example: Оси
          in: query
          required: true
          description: Условие поиска по фамилии
      responses:
        '200':
          description: Успешные поиск пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Невалидные данные
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /friend/set/{user_id}:
    put:
      tags:
        - Friends management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: user_id
          schema:
            $ref: '#/components/schemas/UserId'
          required: true
          in: path
      responses:
        '200':
          description: Пользователь успешно указал своего друга
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /friend/delete/{user_id}:
    put:
      tags:
        - Friends management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: user_id
          schema:
            $ref: '#/components/schemas/UserId'
          required: true
          in: path
      responses:
        '200':
          description: Пользователь успешно удалил из друзей пользователя
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /post/create:
    post:
      tags:
        - Post management
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostText'
      responses:
        '200':
          description: Успешное создание поста
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostText'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /post/update:
    put:
      tags:
        - Post management
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/Post'
      responses:
        "200":
          description: Успешное обновление поста
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /post/delete/{id}:
    put:
      tags:
        - Post management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/PostId'
          required: true
          in: path
      responses:
        '200':
          description: Успешно удален пост
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /post/get/{id}:
    get:
      tags:
        - Post management
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/PostId'
          required: true
          in: path
      responses:
        '200':
          description: Успешно получен пост
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /post/feed:
    get:
      tags:
        - Post management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offset
          schema:
            type: number
            minimum: 0
            description: Оффсет с которого начинать выдачу
            example: 100
            default: 0
          required: false
          in: query
        - name: limit
          schema:
            type: number
            minimum: 1
            description: Лимит, ограничивающий кол-во возвращенных сущностей
            example: 10
            default: 10
          required: false
          in: query
      responses:
        '200':
          description: Успешно получены посты друзей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /dialog/{user_id}/send:
    post:
      tags:
        - Dialogs management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: user_id
          schema:
            $ref: '#/components/schemas/UserId'
          required: true
          in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DialogMessageText'
      responses:
        '200':
          description: Успешно отправлено сообщение
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
  /dialog/{user_id}/list:
    get:
      tags:
        - Dialogs management
      security:
        - bearerAuth: [ ]
      parameters:
        - name: user_id
          schema:
            $ref: '#/components/schemas/UserId'
          required: true
          in: path
      responses:
        '200':
          description: Успешно отправлено сообщение
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DialogMessage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/5xx'
        '503':
          $ref: '#/components/responses/5xx'
components:
  responses:
    '400':
      description: Невалидные данные ввода
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    '401':
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    5xx:
      description: Ошибка сервера
      headers:
        Retry-After:
          description: Время, через которое еще раз нужно сделать запрос
          required: false
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'

  schemas:
    BirthDate:
      type: string
      description: Дата рождения
      format: date
      example: '2017-02-01'
    UserId:
      type: string
      description: Идентификатор пользователя (логин уникальный)
      nullable: false
      minLength: 1
    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserId'
        first_name:
          type: string
          example: Имя
          description: Имя
        second_name:
          type: string
          example: Фамилия
          description: Фамилия
        birthdate:
          $ref: '#/components/schemas/BirthDate'
        biography:
          type: string
          example: Хобби, интересы и т.п.
          description: Интересы
        city:
          type: string
          example: Москва
          description: Город
    PostRequest:
      required:
        - id
        - text
      properties:
        id:
          type: string
          description: Идентификатор поста
          example: 1d535fd6-7521-4cb1-aa6d-031be7123c4d
        text:
          type: string
          description: Текст поста
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Lectus mauris ultrices eros in cursus turpis massa.
    DialogMessageText:
      type: string
      description: Текст сообщения
      example: Привет, как дела?
    DialogMessage:
      type: object
      required:
        - from
        - to
        - text
      properties:
        from:
          $ref: '#/components/schemas/UserId'
        to:
          $ref: '#/components/schemas/UserId'
        text:
          $ref: '#/components/schemas/DialogMessageText'
    Post:
      type: object
      description: Пост пользователя
      required:
        - id
        - text
      properties:
        id:
          type: string
          description: Идентификатор поста
          example: 1d535fd6-7521-4cb1-aa6d-031be7123c4d
        text:
          type: string
          example: Текст
    PostId:
      type: object
      description: Пост пользователя
      required:
        - id
      properties:
        id:
          type: string
          description: Идентификатор поста
    PostText:
      type: object
      description: Пост пользователя
      required:
        - text
      properties:
        text:
          type: string
          example: Текст
    RegisterUserRequest:
      type: object
      description: Данные для регистрации участника
      properties:
        user_id:
          type: string
          example: Логин
          nullable: false
        first_name:
          type: string
          example: Имя
        second_name:
          type: string
          example: Фамилия
        birthdate:
          $ref: '#/components/schemas/BirthDate'
        biography:
          type: string
          example: Хобби, интересы и т.п.
        city:
          type: string
          example: Москва
        password:
          type: string
          example: Секретная строка
          nullable: false
      required:
        - user_id
        - password
    LoginModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        password:
          type: string
          example: Секретная строка
          nullable: false
    ErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Описание ошибки
        request_id:
          type: string
          description: Идентификатор запроса. Предназначен для более быстрого поиска проблем.
        code:
          type: integer
          description: Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
    LoginResponse:
      description: Успешная аутентификация
      type: object
      properties:
        token:
          type: string
          example: e4d2e6b0-cde2-42c5-aac3-0b8316f21e58
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Авторизация по токену, который был получен в методе /login
